geonames <- read.csv("geonames.csv", sep = ';', header = TRUE)
# Step 3: Data preparation
# Extract the required columns
geonames_subset <- geonames[, c("Country.name.EN", "Population", "Coordinates")]
### Convert Coordinates column fro
# Sort the data frame by Population in descending order
geonames_subset <- geonames_subset[order(-geonames_subset$Population), ]
# Subset panel 1
geonames_GroupPop <- geonames_subset %>%
group_by(Country.name.EN) %>%
summarize(Population = sum(Population)) %>%
arrange(Country.name.EN, desc(Population))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidyverse)
# Step 2: Import the Geonames dataset
geonames <- read.csv("geonames.csv", sep = ';', header = TRUE)
library(tidyverse)
# Step 2: Import the Geonames dataset
geonames <- read.csv("geonames.csv", sep = ';', header = TRUE)
# Step 3: Data preparation
# Extract the required columns
geonames_subset <- geonames[, c("Country.name.EN", "Population", "Coordinates")]
# Step 2: Import the Geonames dataset
geonames <- read.csv("geonames.csv", sep = ';', header = TRUE)
# Step 3: Data preparation
# Extract the required columns
geonames_subset <- geonames[, c("Country.name.EN", "Population", "Coordinates")]
### Convert Coordinates column fro
# Sort the data frame by Population in descending order
geonames_subset <- geonames_subset[order(-geonames_subset$Population), ]
# Subset panel 1
geonames_GroupPop <- geonames_subset %>%
group_by(Country.name.EN) %>%
summarize(Population = sum(Population)) %>%
arrange(Country.name.EN, desc(Population))
geonames_GroupPop
geonames_subset %>%
group_by(Country.name.EN) %>%
summarize(Population = sum(Population), NCities = count(Country.name.EN)) %>%
arrange(Country.name.EN, desc(Population))
NCities
group_by(Country.name.EN) %>%
summarize(Population = sum(Population)) %>%
arrange(Country.name.EN, desc(Population))
geonames_subset %>%
mutate()
group_by(Country.name.EN) %>%
summarize(Population = sum(Population))
geonames_subset
geonames_subset %>%
group_by(Country.name.EN) %>%
summarize(Population = sum(Population)) %>%
arrange(Country.name.EN, desc(Population))
# Subset panel 1
geonames_GroupPop <- geonames_subset %>%
group_by(Country.name.EN) %>%
summarize(Population = sum(Population), Country.name.EN = Country.name.EN()) %>%
arrange(Country.name.EN, desc(Population))
geonames_subset %>%
group_by(Country.name.EN) %>%
summarize(Population = sum(Population), n_distinct(Country.name.EN)) %>%
arrange(Country.name.EN, desc(Population))
# Subset panel 1
geonames_GroupPop <- geonames_subset %>%
group_by(Country.name.EN) %>%
summarize(Population = sum(Population)) %>%
arrange(Country.name.EN, desc(Population))
geonames
try_2 <- geonames %>%
select(Name, Country.name.EN, Population, Coordinates)
try_2
try_3 <- try_2 %>%
group_by(Country.name.EN) %>%
summarize(sum(population), n_distinct(Name))
try_2 %>%
group_by(Country.name.EN) %>%
summarize(sum(population), n_distinct(Name))
try_2 %>%
group_by(Country.name.EN)
try_3 <- try_2 %>%
group_by(Country.name.EN) %>%
summarize(sum(population))
try_3 <- try_2 %>%
group_by(Country.name.EN) %>%
summarize(Pupulation = sum(population), N_Cities = n_distinct(Name))
library(gapminder)
# filter() takes logical expressions and returns the rows for which all are TRUE.
gapminder %>%
filter(country == "Rwanda" | country == "Afghanistan")
(my_gap <- gapminder)
my_gap %>%
group_by(continent) %>%
summarize(
n = n(),
n_countries = n_distinct(country)
)
my_gap %>%
group_by(continent)
my_gap %>%
group_by(continent) %>%
summarize(
n = n())
my_gap %>%
group_by(continent) %>%
summarize(
n_countries = n_distinct(country)
)
my_gap %>%
group_by(continent)
try_3 <- try_2 %>%
group_by(Country.name.EN)
try_2 %>%
group_by(Country.name.EN)
Name
geonames
try_2 <- geonames %>%
select(as_factor(Name), Country.name.EN, Population, Coordinates)
try_2 <- geonames %>%
select(Name, Country.name.EN, Population, Coordinates)
my_gap %>%
count(continent)
try_3 <- try_2 %>%
group_by(Country.name.EN) %>%
summarize(Pupulation = sum(population), N_Cities = count(Country.name.EN))
try_2 %>%
group_by(Country.name.EN) %>%
summarize(Pupulation = sum(population), N_Cities = count(as.factor(Country.name.EN)))
try_2 %>%
group_by(Country.name.EN) %>%
summarize(Pupulation = sum(population), N_Cities = count(as_factor(Country.name.EN)))
try_3 <- try_2 %>%
group_by(Country.name.EN) %>%
summarize(Pupulation = sum(population), N_Cities = n_distinct(Name))
df_summary <- df %>%
mutate(Population = as.numeric(Population)) %>%
group_by(Country) %>%
summarise(
Number_of_Cities = n_distinct(City),
Population_of_Country = sum(Population, na.rm = TRUE)
)
df_summary <- try_2 %>%
mutate(Population = as.numeric(Population)) %>%
group_by(Country) %>%
summarise(
Number_of_Cities = n_distinct(City),
Population_of_Country = sum(Population, na.rm = TRUE)
)
df_summary <- try_2 %>%
mutate(Population = as.numeric(Population)) %>%
group_by(Country.name.EN) %>%
summarise(
Number_of_Cities = n_distinct(Name),
Population_of_Country = sum(Population, na.rm = TRUE)
)
df_summary
df_summary <- geonames_p1 %>%
mutate(Population = as.numeric(Population)) %>%
group_by(Country.name.EN) %>%
summarise(
Population = sum(Population, na.rm = TRUE),
Number_of_Cities = n_distinct(Name)
) %>%
arrange(Country.name.EN, desc(Population), Number_of_Cities)
# Subset panel 1
geonames_p1 <- geonames %>%
select(Name, Country.name.EN, Population, Coordinates)
df_summary <- geonames_p1 %>%
mutate(Population = as.numeric(Population)) %>%
group_by(Country.name.EN) %>%
summarise(
Population = sum(Population, na.rm = TRUE),
Number_of_Cities = n_distinct(Name)
) %>%
arrange(Country.name.EN, desc(Population), Number_of_Cities)
df_summary
ggplot(df_summary, aes(x = Number_of_Cities, y = Population, color = Country.name.EN, )) +
geom_point(size = 3) +
theme_minimal() +
labs(x = "Number of Cities (Group)", y = "Total Population (Group)", title = "Cities in a Country vs. Total Population (Grouped)") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1)) + guides(color = FALSE)
ggplot(df_summary, aes(x = Number_of_Cities, y = Population, color = Country.name.EN, )) +
geom_point(size = 3) +
theme_minimal() +
labs(x = "Number of Cities (Group)", y = "Total Population (Group)", title = "Cities in a Country vs. Total Population (Grouped)")
ggplot(df_summary, aes(x = Number_of_Cities, y = Population, color = Country.name.EN, )) +
geom_point(size = 3) +
theme_minimal() +
labs(x = "Number of Cities (Group)", y = "Total Population (Group)", title = "Cities in a Country vs. Total Population (Grouped)") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1)) + guides(color = FALSE)
ggplot(df_summary, aes(x = Number_of_Cities, y = Population, color = Country.name.EN, )) +
geom_point(size = 3) +
theme_minimal() +
labs(x = "Number of Cities (Group)", y = "Total Population (Group)", title = "Cities in a Country vs. Total Population (Grouped)") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(df_summary, aes(x = Number_of_Cities, y = Population, color = Country.name.EN, )) +
geom_point(size = 3) +
theme_minimal() +
labs(x = "Number of Cities (Group)", y = "Total Population (Group)", title = "Cities in a Country vs. Total Population (Grouped)") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1)) + guides(color = FALSE)
ggplot(df_summary, aes(x = Number_of_Cities, y = Population, color = Country.name.EN, )) +
geom_point(size = 3) +
theme_minimal() +
labs(x = "Number of Cities", y = "Country Population", title = "Cities in a Country vs. Total Population (Grouped)") +
guides(color = FALSE)
df_summary
ggplot(df_summary, aes(x = Number_of_Cities, y = Population, color = Country.name.EN, )) +
geom_point(size = 3) +
theme_minimal() +
labs(x = "Number of Cities", y = "Country Population", title = "Cities in a Country vs. Total Population (Grouped)") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1)) + guides(color = FALSE)
ggplot(df_summary, aes(x = Number_of_Cities, y = Population, color = Country.name.EN, )) +
geom_jitter()
ggplot(df_summary, aes(x = Number_of_Cities, y = Population, color = Country.name.EN, )) +
geom_jitter() +
guides(color = FALSE)
ggplot(df_summary, aes(x = Number_of_Cities, y = Population, color = Country.name.EN, )) +
geom_point(size = 3) +
theme_minimal() +
labs(x = "Number of Cities", y = "Country Population", title = "Cities in a Country vs. Total Population (Grouped)") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1)) + guides(color = FALSE)
ggplot(df_summary, aes(x = Number_of_Cities, y = Population, color = Country.name.EN, )) +
geom_jitter() +
guides(color = FALSE)
ggplot(df_summary, aes(x = Number_of_Cities, y = Population)) +
geom_jitter()
ggplot(df_summary, aes(x = Number_of_Cities, y = Population)) +
geom_smooth()
ggplot(df_summary, aes(x = Number_of_Cities, y = Population)) +
geom_bar()
ggplot(df_summary, aes(x = Number_of_Cities, y = Population)) +
geom_boxplot()
geom_jitter
geom_jitter
ggplot(df_summary, aes(x = Number_of_Cities, y = Population)) +
geom_jitter()
set.seed(123)
# Create Distribution
x <- rnorm(100)
# Create Distribution
x <- rnorm(100, 0, 2)
# fixing betas
beta0 <- 1
beta1 <- 2
eta <- beta0 + beta1*x
# Calculate linear predictor (n)
mu <- exp(eta)
y <- rpois(100, lambda = mu)
y[1:10]
set.seed(123)
# Create Distribution
x <- rnorm(100, 0, 2)
# fixing betas
beta0 <- 1
beta1 <- 2
eta <- beta0 + beta1*x
# Calculate linear predictor (n)
mu <- exp(eta)
y <- rpois(100, lambda = mu)
y[1:10]
plot(x, y)
plot(x, y)
plot(x, log(y))
z <- log(y)
summary(z)
z <- log(y+)
z <- log(y+1)
summary(z)
modA <- lm(formula = z~x)
summary(modA)
summary(modA)
plot(modA)
modB <- lm(z~x+I(x^2))
summary(modB)
plot(modB)
y[1:100]
modC <- lm(y~x)
modC <- glm(y~x, family = "poisson")
summary(modC)
summary(modC)
plot(modC)
plot(modC)
p <- predict(modC)
summary(p)
summary(p1)
p1 <- predict(modC)
summary(p1)
eta.fitted <- coefficients(modC)[1] + coefficients(modC)[2]*x
eta.fitted
exp(eta.fitted[1:10])
p2 <- predict(modC, type = "response") #for discrete data
summary(p2)
library(conflicted)
conflicts_prefer(dplyr::select())
knitr::opts_chunk$set(warning=FALSE,
message=FALSE,
tidy.opts=list(width.cutoff = 60),
tidy = TRUE)
knitr::opts_knit$set(global.par=TRUE)
# built-in output hook
hook_output <- knitr::knit_hooks$get("output")
# custom chunk option output.lines to truncate text output
knitr::knit_hooks$set(output = function(x, options) {
n <- options$output.lines
if (!is.null(n)) {
x <- xfun::split_lines(x)
if(length(x) > n) {
top <- head(x, n)
bot <- tail(x, n)
x <- c(top, "\n....\n", bot)
}
x <- paste(x, collapse="\n")
}
hook_output(x, options)
})
library(tidyverse)
# Specify the path to your zipped CSV file
zip_file_path <- "C:\Users\gianl\Desktop\0_TUe materials\AssignmentPM\adv-pm\data\BPI_Challenge_2017_filtered.zip"
library(tidyverse)
# Specify the path to your zipped CSV file
zip_file_path <- "C:/Users\gianl\Desktop\0_TUe materials\AssignmentPM\adv-pm\data\BPI_Challenge_2017_filtered.zip"
library(tidyverse)
# Specify the path to your zipped CSV file
zip_file_path <- "C:/Users/gianl/Desktop/0_TUe materials/AssignmentPM/adv-pm/data/BPI_Challenge_2017_filtered.zip"
# Specify the name of the CSV file within the zip file
csv_file_name <- "BPI_Challenge_2017_filtered.csv"
# Use unzip to extract the CSV file
unzip(zip_file_path, files = csv_file_name)
# Read the extracted CSV file using read_csv
data <- read_csv(csv_file_name)
set wd "C:/Users/gianl/Desktop/0_TUe materials/AssignmentPM/adv-pm/data"
set_wd "C:/Users/gianl/Desktop/0_TUe materials/AssignmentPM/adv-pm/data"
set_wd("C:/Users/gianl/Desktop/0_TUe materials/AssignmentPM/adv-pm/data")
setwd("C:/Users/gianl/Desktop/0_TUe materials/AssignmentPM/adv-pm/data")
library(tidyverse)
# Specify the path to your zipped CSV file
zip_file_path <- "C:/Users/gianl/Desktop/0_TUe materials/AssignmentPM/adv-pm/data/BPI_Challenge_2017_filtered.zip"
# Specify the name of the CSV file within the zip file
csv_file_name <- "BPI_Challenge_2017_filtered.csv"
# Use unzip to extract the CSV file
unzip(zip_file_path, files = csv_file_name)
# Read the extracted CSV file using read_csv
data <- read_csv(csv_file_name)
setwd("C:/Users/gianl/Desktop/0_TUe materials/AssignmentPM/adv-pm/data")
library(tidyverse)
data <- read_csv(unz("BPI_Challenge_2017_filtered.zip", "BPI_Challenge_2017_filtered.csv"))
library(tidyverse)
data <- read_csv(unz("C:/Users/gianl/Desktop/0_TUe materials/AssignmentPM/adv-pm/data/BPI_Challenge_2017_filtered.zip", "BPI_Challenge_2017_filtered.csv"))
setwd("C:/Users/gianl/Desktop/0_TUe materials/AssignmentPM/r")
data <- read_csv("BPI_Challenge_2017_filtered.csv")
data
selected_columns <- data %>% select(Case ID, Activity, Start Timestamp, Variant index, NumberOfTerms, OfferedAmount, MonthlyCost, CreditScore, OfferID, Selected)
selected_columns <- data %>% select("Case ID", Activity, Start Timestamp, Variant index, NumberOfTerms, OfferedAmount, MonthlyCost, CreditScore, OfferID, Selected)
selected_columns <- data %>% select("Case ID", "Activity", "Start Timestamp", "Variant index", "NumberOfTerms", "OfferedAmount", "MonthlyCost", "CreditScore", "OfferID", "Selected")
selected_columns
filtered_data
# Assuming "selected_columns" is your tibble with the selected columns
# Replace "OfferID" and "Selected" with your actual column names
filtered_data <- selected_columns %>% filter(!is.na(OfferID) | !is.na(Selected))
conflicted::conflicts_prefer(dplyr::filter)
filtered_data
# Assuming "selected_columns" is your tibble with the selected columns
# Replace "OfferID" and "Selected" with your actual column names
filtered_data <- selected_columns %>% dplyr::filter(!is.na(OfferID) | !is.na(Selected))
filtered_data
# Assuming "selected_columns" is your tibble with the selected columns
# Replace "OfferID" and "Selected" with your actual column names
filtered_data <- selected_columns %>% dplyr::filter((!is.na(OfferID) | !is.na(Selected)) & (Activity == "O_Create Offer" | Activity == "O_Created"))
filtered_data
modified_data <- filtered_data %>%
fill(OfferID, .direction = "up")
modified_data
final_data <- modified_data %>%
filter(!is.na(Selected))
final_data
# Assuming "final_data" is your tibble after removing rows with missing values in "Selected"
# Replace "CreditScore" and "Case ID" with your actual column names
# Replace "CreditScore" based on conditions
final_data <- final_data %>%
group_by(`Case ID`) %>%
mutate(
CreditScore = ifelse(CreditScore == 0 & any(CreditScore > 0), max(CreditScore[CreditScore > 0]), median(CreditScore[CreditScore > 0]))
) %>%
ungroup()
final_data
# Replace "CreditScore" based on conditions
final_data <- final_data %>%
group_by(`Case ID`) %>%
mutate(
CreditScore = ifelse(is.na(CreditScore) | CreditScore == 0,
ifelse(any(CreditScore > 0), max(CreditScore[CreditScore > 0]), median(CreditScore[CreditScore > 0])),
CreditScore)
) %>%
ungroup()
final_data
final_data <- modified_data %>%
filter(!is.na(Selected))
final_data
# Assuming "final_data" is your tibble after removing rows with missing values in "Selected"
# Replace "CreditScore" and "Case ID" with your actual column names
final_data <- final_data %>%
group_by(`Case ID`) %>%
mutate(
CreditScore = replace(CreditScore, is.na(CreditScore) | CreditScore == 0,
ifelse(any(CreditScore > 0), max(CreditScore[CreditScore > 0]), median(CreditScore[CreditScore > 0])))
) %>%
ungroup()
final_data
# Assuming "final_data" is your tibble after removing rows with missing values in "Selected"
# Replace "CreditScore" and "Case ID" with your actual column names
final_data <- final_data %>%
group_by(`Case ID`) %>%
mutate(
CreditScore = replace(CreditScore, is.na(CreditScore),
max(CreditScore[CreditScore > 0], median(CreditScore[CreditScore > 0]))
)) %>%
ungroup()
final_data
# Assuming "final_data" is your tibble after removing rows with missing values in "Selected"
# Replace "CreditScore" and "Case ID" with your actual column names
final_data <- final_data %>%
group_by(`Case ID`) %>%
mutate(
CreditScore = replace(CreditScore, is.na(CreditScore),
max(CreditScore[CreditScore > 0], 0))
)) %>%
final_data <- final_data %>%
group_by(`Case ID`) %>%
mutate(
CreditScore = replace(CreditScore, is.na(CreditScore),
max(CreditScore[CreditScore > 0])0)
final_data <- final_data %>%
group_by(`Case ID`) %>%
mutate(
CreditScore = replace(CreditScore, is.na(CreditScore),
max(CreditScore[CreditScore > 0]), 0)
)) %>%
final_data <- final_data %>%
group_by(`Case ID`) %>%
mutate(
CreditScore = replace(CreditScore, is.na(CreditScore),
max(CreditScore[CreditScore > 0]), 0)
) %>%
ungroup()
final_data
final_data <- final_data %>%
group_by(`Case ID`) %>%
mutate(
CreditScore = ifelse(any(CreditScore > 0 & !is.na(CreditScore)), max(CreditScore[CreditScore > 0]), CreditScore)
) %>%
ungroup()
final_data
final_data <- modified_data %>%
filter(!is.na(Selected))
final_data
sum(!is.na(final_data$CreditScore))
final_data <- modified_data %>%
filter(!is.na(Selected))
final_data
sum(final_data$CreditScore != 0, na.rm = TRUE)
# Assuming "final_data" is your tibble after removing rows with missing values in "Selected"
# Replace "CreditScore" and "Case ID" with your actual column names
final_data <- final_data %>%
group_by(`Case ID`) %>%
mutate(
CreditScore = ifelse(any(CreditScore > 0 & !is.na(CreditScore)), max(CreditScore[CreditScore > 0]), CreditScore)
) %>%
ungroup()
final_data
sum(final_data$CreditScore != 0, na.rm = TRUE)
# Assuming "final_data" is your tibble after removing rows with missing values in "Selected"
# Replace "CreditScore" and "Case ID" with your actual column names
final_data <- final_data %>%
group_by(`Case ID`) %>%
mutate(
CreditScore = ifelse(any(CreditScore > 0 & !is.na(CreditScore)), max(CreditScore[CreditScore > 0]), CreditScore)
) %>%
ungroup()
final_data
# check if changes were made (yesss)
sum(final_data$CreditScore != 0, na.rm = TRUE)
final_data_median <- final_data %>%
mutate(CreditScore = ifelse(CreditScore == 0 | is.na(CreditScore), median(CreditScore, na.rm = TRUE), CreditScore))
final_data_median
# Assuming "final_data" is your tibble after removing rows with missing values in "Selected"
# Replace "CreditScore" and "Case ID" with your actual column names
final_data <- final_data %>%
group_by(`Case ID`) %>%
mutate(
CreditScore = ifelse(any(CreditScore > 0 & !is.na(CreditScore)), max(CreditScore[CreditScore > 0]), CreditScore)
) %>%
ungroup()
final_data
# check if changes were made (yesss)
sum(final_data$CreditScore != 0, na.rm = TRUE)
final_data_median <- final_data %>%
mutate(CreditScore = ifelse(CreditScore == 0 | is.na(CreditScore), median(CreditScore[CreditScore != 0], na.rm = TRUE), CreditScore))
final_data_median
# copy the value in OfferID of each row in the row that comes before it
modified_data <- filtered_data %>%
fill(OfferID, .direction = "up")
# then delete the column that originally contained OfferID and count the number of non-zero values in "CreditScore" (to later check)
final_data <- modified_data %>%
filter(!is.na(Selected))
final_data
sum(final_data$CreditScore != 0, na.rm = TRUE)
